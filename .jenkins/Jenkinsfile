// common lib definition
@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

DOCKER_REGISTRY = "oejenkinscidockerregistry.azurecr.io"


// Tests running on hardware with custom path to libdcap_quoteprov.so
def ACCTest(String label, String version, String compiler, String build_type) {
    stage("${label} ${compiler} SGX1-FLC ${build_type}") {
        node("${label}") {
            cleanWs()
            checkout scm

            // Clone the Open Enclave repo
            dir("${WORKSPACE}/openenclave") {
                git url: 'https://github.com/Microsoft/openenclave.git'
            }

            // Run hardware tests using the libdcap_quoteprov.so build
            def task = """
                    cd ${WORKSPACE}/src/Linux
                    ./configure
                    make
                    mkdir -p ${WORKSPACE}/openenclave/build
                    cd ${WORKSPACE}/openenclave/build
                    cmake ${WORKSPACE}/openenclave -G Ninja -DCMAKE_BUILD_TYPE=${build_type}
                    ninja -v
                    LD_LIBRARY_PATH=${WORKSPACE}/src/Linux ctest --output-on-failure
                   """
            oe.Run(compiler, task)
        }
    }
}

// Test using oetools-test Docker image with /dev/sgx mounted inside container
def ACCContainerTest(String label, String version) {
    stage("Ubuntu ${version} Non-Simulation Container SGX1-FLC RelWithDebInfo") {
        node("${label}") {
            cleanWs()
            checkout scm

            // Clone the Open Enclave repo
            dir("${WORKSPACE}/openenclave") {
                git url: 'https://github.com/Microsoft/openenclave.git'
            }

            // Run the OE tests from the git repository with the currently
            // generated az-dcap-client deb package installed
            def task = """
                    cd ${WORKSPACE}/src/Linux
                    dpkg-buildpackage -us -uc
                    sudo dpkg -i ${WORKSPACE}/src/az-dcap-client_*_amd64.deb
                    mkdir -p ${WORKSPACE}/openenclave/build
                    cd ${WORKSPACE}/openenclave/build
                    cmake ${WORKSPACE}/openenclave -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo
                    ninja -v
                    ctest --output-on-failure
                   """
            oe.ContainerRun("${DOCKER_REGISTRY}/az-dcap-tools-${version}", 'clang-7', task, '--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx')
        }
    }
}

def ACCTestOeRelease(String label, String version) {
    stage("OpenEnclave release samples ${version}") {
        node("${label}") {
            cleanWs()
            checkout scm

            // Run the OE samples bundled with the published OE package, having
            // the currently generated az-dcap-client deb package installed
            def task = """
                    cd ${WORKSPACE}/src/Linux
                    dpkg-buildpackage -us -uc
                    sudo dpkg -i ${WORKSPACE}/src/az-dcap-client_*_amd64.deb
                    sudo apt-get update
                    sudo apt-get install -y open-enclave
                    . /opt/openenclave/share/openenclave/openenclaverc
                    cp -r /opt/openenclave/share/openenclave/samples/ ~/samples
                    for DIR in \$(find ~/samples/* -maxdepth 0 -type d); do
                        cd \$DIR
                        make build
                        make run
                    done
                   """
            oe.ContainerRun("${DOCKER_REGISTRY}/az-dcap-tools-${version}", 'clang-7', task, '--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx')
        }
    }
}

// Test DCAP build process
def DCAPBuildTest(String label, String build_type) {
    stage("${label} ${build_type}") {
        node("${label}") {
            cleanWs()
            checkout scm
            bat """
                vcvars64.bat x64 && \
                cd ${WORKSPACE}\\Azure-DCAP-Client\\src\\Windows && \
                powershell.exe -ExecutionPolicy Bypass -Command \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; .\\get-prereqs.ps1\" && \
                powershell.exe -ExecutionPolicy Bypass -Command \"Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile .\\nuget.exe\" && \
                nuget.exe restore dcap_provider.vcxproj -PackagesDirectory packages && \
                MSBuild.exe dcap_provider.vcxproj /p:Configuration=${build_type};Platform=x64
            """
        }
    }
}

parallel "ACC1604 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1604', '16.04') },
         "ACC1804 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1804', '18.04') },
         "ACC1604 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1604', '16.04', 'clang-7', 'Debug') },
         "ACC1604 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1604', '16.04', 'clang-7', 'Release') },
         "ACC1604 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1604', '16.04', 'clang-7', 'RelWithDebinfo') },
         "ACC1604 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1604', '16.04', 'gcc', 'Debug') },
         "ACC1604 SGX1-FLC gcc Release" :              { ACCTest('ACC-1604', '16.04', 'gcc', 'Release') },
         "ACC1604 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1604', '16.04', 'gcc', 'RelWithDebInfo') },
         "ACC1804 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1804', '18.04', 'clang-7', 'Debug') },
         "ACC1804 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1804', '18.04', 'clang-7', 'Release') },
         "ACC1804 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1804', '18.04', 'clang-7', 'RelWithDebinfo') },
         "ACC1804 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1804', '18.04', 'gcc', 'Debug') },
         "ACC1804 SGX1-FLC gcc Release" :              { ACCTest('ACC-1804', '18.04', 'gcc', 'Release') },
         "ACC1804 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1804', '18.04', 'gcc', 'RelWithDebInfo') },
         "ACC1604 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1604','16.04') },
         "ACC1804 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1804','18.04') },
         "ACCWin DCAP Debug Test" :                    { DCAPBuildTest('SGXFLC-Windows', 'Debug') },
         "ACCWin DCAP Release Test" :                  { DCAPBuildTest('SGXFLC-Windows', 'Release') }
