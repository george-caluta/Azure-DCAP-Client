@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

// Tests running on hardware with custom path to libdcap_quoteprov.so
def ACCTest(String label, String version, String compiler, String build_type) {

    stage("${label} ${compiler} SGX1-FLC ${build_type}") {
        node("${label}") {
            // Get Jenkins user and group for docker image
            String buildArgs = oe.dockerBuildArgs("UID=\$(id -u)",
                                               "GID=\$(id -g)",
                                               "UNAME=\$(id -un)",
                                               "GNAME=\$(id -gn)",
                                               "ubuntu_version=${version}")

            // Generate libdcap_quoteprov.so in the $WORKSPACE/src/Linux folder

            oe.dockerImage("az-dcap-builder", "${WORKSPACE}/.jenkins", "${buildArgs}").inside {
                dir('src/Linux') {
                    sh './configure'
                    sh 'make'
                }
            }

            // Run hardware tests using custom LD_PRELOAD
            dir('openenclave') {
                git url: 'https://github.com/Microsoft/openenclave.git'
            }
            dir('openenclave/build') {
                withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}","LD_LIBRARY_PATH=${WORKSPACE}/src/Linux"]) {
                    timeout(15) {
                        sh """
                        cmake ${WORKSPACE}/openenclave -DCMAKE_BUILD_TYPE=${build_type}
                        make
                        ctest --output-on-failure
                        """
                    }
                }
            }
        }
    }
}

// Test using oetools-test Docker image with /dev/sgx mounted inside container
def ACCContainerTest(String label, String version) {
    stage("Ubuntu${version} Non-Simulation Container SGX1-FLC RelWithDebInfo") {
        node("${label}") {

            // Get Jenkins user and group for docker image
            String buildArgs = oe.dockerBuildArgs("UID=\$(id -u)",
                                               "GID=\$(id -g)",
                                               "UNAME=\$(id -un)",
                                               "GNAME=\$(id -gn)",
                                               "ubuntu_version=${version}")

            
            oe.dockerImage("az-dcap-builder", "${WORKSPACE}/.jenkins", "${buildArgs}").inside {
                dir('src/Linux') {
                    sh 'dpkg-buildpackage -us -uc'
                }
            }

            // Clone openenclave repo
            dir('openenclave') {
                git url: 'https://github.com/Microsoft/openenclave.git'
            }
            /*
            Use oetools-azure Dockerfile from Openenclave repository
            Remove the installed az-dcap-client from the container
            Install az-dcap-client in the container from the deb package we previously built
            */
            oe.ContainerRun("oetools-test", "", "${buildArgs} -f openenclave/.jenkins/Dockerfile ./openenclave")
            /*
            This is build from oetoolsImage, must be built without cache so it actually installs
            the current build of az-dcap-client from the .deb we just built
            */

            // Not sure how to translate withEnv(["CC=clang-7","CXX=clang++-7"]) and '--device /dev/sgx:/dev/sgx' to the shared lib function params
            def task = """
                        cmake ${WORKSPACE}/openenclave -DCMAKE_BUILD_TYPE=RelWithDebInfo
                        make
                        ctest --output-on-failure
                        """
             oe.ContainerRun("az-dcap-test", "", "${task}", "${buildArgs} -f openenclave/.jenkins/Dockerfile ./openenclave", "--device /dev/sgx:/dev/sgx")

        }
    }
}

def ACCTestOeRelease(String label, String version) {
    stage("OpenEnclave release samples ${label}") {
        node("${label}") {

            // Get Jenkins user and group for docker image
            String buildArgs = oe.dockerBuildArgs("UID=\$(id -u)",
                                               "GID=\$(id -g)",
                                               "UNAME=\$(id -un)",
                                               "GNAME=\$(id -gn)",
                                               "ubuntu_version=${version}")


            oe.dockerImage("az-dcap-builder", "${WORKSPACE}/.jenkins", "${buildArgs}").inside {
                dir('src/Linux') {
                    sh 'dpkg-buildpackage -us -uc'
                }
            }


            // Clone openenclave repo
            dir('openenclave') {
                git url: 'https://github.com/Microsoft/openenclave.git'
            }
            /*
            Use oetools-azure Dockerfile from Openenclave repository
            Remove the installed az-dcap-client from the container
            Install az-dcap-client in the container from the deb package we previously built
            then install the open-enclave package and run the samples
            */
            oe.ContainerRun("oetools-test", "", "${buildArgs} -f openenclave/.jenkins/Dockerfile ./openenclave")
            /*
            This is build from oetoolsImage, must be built without cache so it actually installs
            the current build of az-dcap-client from the .deb we just built
            and installs open-enclave release candidate
            */
            buildArgs += dockerBuildArgs("oeinstall=true")
            def testImage = docker.build("az-dcap-test-${version}", "${buildArgs} --no-cache -f .jenkins/Dockerfile.scripts .")
            testImage.inside('--device /dev/sgx:/dev/sgx') {
                dir('samples') {
                    timeout(5) {
                        sh '''. /opt/openenclave/share/openenclave/openenclaverc
                            cp -r /opt/openenclave/share/openenclave/samples/ ~/samples
                            for DIR in $(find ~/samples/* -maxdepth 0 -type d); do
                              cd $DIR
                              make build
                              make run
                            done'''
                    }
                }
            }
            def task = """
                        sh '''. /opt/openenclave/share/openenclave/openenclaverc
                            cp -r /opt/openenclave/share/openenclave/samples/ ~/samples
                            for DIR in $(find ~/samples/* -maxdepth 0 -type d); do
                              cd $DIR
                              make build
                              make run
                            done'''
                        """
             oe.ContainerRun("az-dcap-test", "", "${task}", "${buildArgs} --no-cache -f .jenkins/Dockerfile.scripts .", "--device /dev/sgx:/dev/sgx")
        }
    }
}

parallel "ACC1604 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1604', '16.04') },
         "ACC1804 SGX1-FLC Container RelWithDebInfo" : { ACCContainerTest('ACC-1804', '18.04') },
         "ACC1604 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1604', '16.04', 'clang-7', 'Debug') },
         "ACC1604 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1604', '16.04', 'clang-7', 'Release') },
         "ACC1604 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1604', '16.04', 'clang-7', 'RelWithDebinfo') },
         "ACC1604 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1604', '16.04', 'gcc', 'Debug') },
         "ACC1604 SGX1-FLC gcc Release" :              { ACCTest('ACC-1604', '16.04', 'gcc', 'Release') },
         "ACC1604 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1604', '16.04', 'gcc', 'RelWithDebInfo') },
         "ACC1804 SGX1-FLC clang-7 Debug" :            { ACCTest('ACC-1804', '18.04', 'clang-7', 'Debug') },
         "ACC1804 SGX1-FLC clang-7 Release" :          { ACCTest('ACC-1804', '18.04', 'clang-7', 'Release') },
         "ACC1804 SGX1-FLC clang-7 RelWithDebInfo" :   { ACCTest('ACC-1804', '18.04', 'clang-7', 'RelWithDebinfo') },
         "ACC1804 SGX1-FLC gcc Debug" :                { ACCTest('ACC-1804', '18.04', 'gcc', 'Debug') },
         "ACC1804 SGX1-FLC gcc Release" :              { ACCTest('ACC-1804', '18.04', 'gcc', 'Release') },
         "ACC1804 SGX1-FLC gcc RelWithDebInfo" :       { ACCTest('ACC-1804', '18.04', 'gcc', 'RelWithDebInfo') },
         "ACC1604 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1604','16.04') },
         "ACC1804 OpenEnclave Release Test" :          { ACCTestOeRelease('ACC-1804','18.04') }
